import datetime
import discord
from discord import app_commands, ui
from discord.ext import commands

from utils import *
from constants import *


class ImagineButtonView(discord.ui.View):
    def __init__(self, link: str = None):
        super().__init__(timeout=None)
        self.link = link

        if link is not None and len(link) < 512:
            self.add_item(discord.ui.Button(label="Link", url=self.link))

    @discord.ui.button(
        style=discord.ButtonStyle.secondary,
        custom_id="regenerate-button",
        emoji="<:redo:1187101382101180456>",
    )
    async def regenerate(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        message_id = interaction.message.id
        await interaction.response.send_message(
            embed=discord.Embed(
                title="Regenerating Your Image",
                description="Please wait while we generate your image",
                color=discord.Color.blurple(),
            ),
            ephemeral=True,
        )

        message_data = get_prompt_data(message_id)

        if not message_data:
            await interaction.followup.send(
                embed=discord.Embed(
                    title="Error",
                    description="Message not found",
                    color=discord.Color.red(),
                ),
                ephemeral=True,
            )
            return

        start = datetime.datetime.now()

        prompt = message_data["prompt"]
        width = message_data["width"]
        height = message_data["height"]
        model = message_data.get("model", "flux")
        negative = message_data["negative"]
        cached = message_data["cached"]
        nologo = message_data["nologo"]
        enhance = message_data["enhance"]

        try:
            dic, image = await generate_image(
                prompt, width, height, model, negative, cached, nologo, enhance
            )
        except Exception as e:
            print(e)
            await interaction.followup.send(
                embed=discord.Embed(
                    title="Error",
                    description=f"Error generating image : {e}",
                    color=discord.Color.red(),
                ),
                ephemeral=True,
            )
            return

        image_file = discord.File(image, filename="image.png")

        if dic["nsfw"]:
            image_file.filename = f"SPOILER_{image_file.filename}"

        time_taken = datetime.datetime.now() - start

        embed = discord.Embed(
            title="",
            timestamp=datetime.datetime.now(datetime.timezone.utc),
        )

        embed.add_field(name="Prompt", value=f"```{prompt[:1020]+"..." if len(prompt)>= 1024 else prompt}```", inline=False)

        if len(prompt) < 80 or enhance:
            if "enhanced_prompt" in dic:
                embed.add_field(
                    name="Enhanced Prompt",
                    value=f"```{dic['enhanced_prompt'][:1020]+"..." if len(dic['enhanced_prompt'])>= 1024 else dic['enhanced_prompt']}```",
                    inline=False,
                )

        embed.add_field(name="Seed", value=f"```{dic['seed']}```", inline=True)
        embed.add_field(
            name="Time Taken",
            value=f"```{round(time_taken.total_seconds(), 2)} s```",
            inline=True,
        )

        embed.set_image(url=f"attachment://image.png")

        embed.set_footer(text=f"Generated by {interaction.user}")

        response = await interaction.followup.send(
            embed=embed,
            file=image_file,
            view=ImagineButtonView(link=dic["bookmark_url"]),
        )

        dic["_id"] = response.id
        dic["channel_id"] = interaction.channel.id
        dic["user_id"] = interaction.user.id
        dic["guild_id"] = interaction.guild.id
        dic["author"] = interaction.user.id
        dic["bookmarks"] = []
        dic["likes"] = []

        user_data = get_user_data(interaction.user.id)
        if user_data is None:
            user_data = {
                "_id": interaction.user.id,
                "bookmarks": [],
                "likes": [],
                "prompts": [],
                "last_prompt": None,
            }
            save_user_data(interaction.user.id, user_data)

        user_data["prompts"].append(response.id)

        update_user_data(interaction.user.id, user_data)
        save_prompt_data(message_id, dic)

    @discord.ui.button(
        label="0",
        style=discord.ButtonStyle.secondary,
        custom_id="like-button",
        emoji="<:like:1187101385230143580>",
    )
    async def like(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            id = interaction.message.id
            message_data = get_prompt_data(id)
            likes = message_data["likes"]

            user_data = get_user_data(interaction.user.id)
            if user_data is None:
                user_data = {
                    "_id": interaction.user.id,
                    "bookmarks": {},
                    "likes": {},
                    "prompts": {},
                    "last_prompt": None,
                }
                save_user_data(interaction.user.id, user_data)

            if interaction.user.id in likes:
                likes.remove(interaction.user.id)
                update_prompt_data(id, {"likes": likes})
                button.label = f"{len(likes)}"
                await interaction.response.edit_message(view=self)

                user_data["likes"].remove(id)
                update_user_data(interaction.user.id, user_data)

                return
            else:
                likes.append(interaction.user.id)
                update_prompt_data(id, {"likes": likes})
                button.label = f"{len(likes)}"
                await interaction.response.edit_message(view=self)

                user_data["likes"].append(id)
                update_user_data(interaction.user.id, user_data)

                return
        except Exception as e:
            print(e)
            interaction.response.send_message(
                embed=discord.Embed(
                    title="Error Liking the Image",
                    description=f"{e}",
                    color=discord.Color.red(),
                ),
                ephemeral=True,
            )

    @discord.ui.button(
        label="0",
        style=discord.ButtonStyle.secondary,
        custom_id="bookmark-button",
        emoji="<:save:1187101389822902344>",
    )
    async def bookmark(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        try:
            id = interaction.message.id
            message_data = get_prompt_data(id)
            bookmarks = message_data["bookmarks"]

            if interaction.user.id in bookmarks:
                await interaction.response.send_message(
                    embed=discord.Embed(
                        title="Error",
                        description="You have already bookmarked this image",
                        color=discord.Color.red(),
                    ),
                    ephemeral=True,
                )
            else:
                bookmarks.append(interaction.user.id)
                update_prompt_data(id, {"bookmarks": bookmarks})
                button.label = f"{len(bookmarks)}"
                await interaction.response.edit_message(view=self)

                embed = discord.Embed(
                    description=f"**Prompt : {message_data['prompt']}**",
                    color=discord.Color.og_blurple(),
                )

                embed.add_field(name="", value=f"Url : {message_data['bookmark_url']}", inline=False)

                embed.set_image(url=message_data["bookmark_url"])

                await interaction.user.send(embed=embed)

                user_data = get_user_data(interaction.user.id)
                if user_data is None:
                    user_data = {
                        "_id": interaction.user.id,
                        "bookmarks": [],
                        "likes": [],
                        "prompts": [],
                        "last_prompt": None,
                    }
                    save_user_data(interaction.user.id, user_data)

                user_data["bookmarks"].append(id)
                update_user_data(interaction.user.id, user_data)

                return

        except Exception as e:
            print(e)
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="Error Bookmarking the Image",
                    description=f"{e}",
                    color=discord.Color.red(),
                ),
                ephemeral=True,
            )

    @discord.ui.button(
        style=discord.ButtonStyle.red,
        custom_id="delete-button",
        emoji="<:delete:1187102382312652800>",
    )
    async def delete(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            data = get_prompt_data(interaction.message.id)
            author_id = data["author"]
            likes = data["likes"]
            bookmarks = data["bookmarks"]
            try:
                int(author_id)
            except:
                pass

            if interaction.user.id != author_id:
                await interaction.response.send_message(
                    embed=discord.Embed(
                        title="Error",
                        description="You can only delete your own images",
                        color=discord.Color.red(),
                    ),
                    ephemeral=True,
                )
                return

            delete_prompt_data(interaction.message.id)
            await interaction.message.delete()

            user_data = get_user_data(interaction.user.id)
            if user_data is None:
                return

            user_data["prompts"].remove(interaction.message.id)
            update_user_data(interaction.user.id, user_data)

            for i in likes:
                try:
                    user_data = get_user_data(i)
                    user_data["likes"].remove(interaction.message.id)
                    update_user_data(i, user_data)
                except:
                    pass

            for i in bookmarks:
                try:
                    user_data = get_user_data(i)
                    user_data["bookmarks"].remove(interaction.message.id)
                    update_user_data(i, user_data)
                except:
                    pass

            return

        except Exception as e:
            print(e)
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="Error Deleting the Image",
                    description=f"{e}",
                    color=discord.Color.red(),
                ),
                ephemeral=True,
            )

            return

class Imagine(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def cog_load(self):
        await self.bot.wait_until_ready()
        self.bot.add_view(ImagineButtonView())

    @app_commands.command(name="pollinate", description="Generate AI Images")
    @app_commands.choices(
        model=[app_commands.Choice(name=choice, value=choice) for choice in MODELS],
    )
    @app_commands.guild_only()
    @app_commands.checks.cooldown(1, 15)
    @app_commands.describe(
        prompt="Prompt of the Image you want want to generate",
        height="Height of the Image",
        width="Width of the Image",
        model="Model to use for generating the Image",
        enhance="Enables AI Prompt Enhancement",
        negative="The things not to include in the Image",
        cached="Uses the Default seed",
        nologo="Remove the Logo",
        private="Only you can see the generated Image if set to True",
    )
    async def imagine_command(
        self,
        interaction: discord.Interaction,
        prompt: str,
        width: int = 1000,
        height: int = 1000,
        model: app_commands.Choice[str] = MODELS[0],
        enhance: bool | None = None,
        negative: str | None = None,
        cached: bool = False,
        nologo: bool = False,
        private: bool = False,
    ):
        await interaction.response.defer(thinking=True, ephemeral=private)

        if len(prompt) > 2000:
            raise PromptTooLongError("Prompt must be less than 2000 characters")

        if width < 16 or height < 16:
            raise DimensionTooSmallError("Width and Height must be greater than 16")

        try:
            model = model.value
        except:
            pass

        start = datetime.datetime.now()

        dic, image = await generate_image(
            prompt, width, height, model, negative, cached, nologo, enhance, private
        )

        image_file = discord.File(image, filename="image.png")

        if dic["nsfw"]:
            image_file.filename = f"SPOILER_{image_file.filename}"

        view = ImagineButtonView(link=dic["bookmark_url"])

        time_taken = datetime.datetime.now() - start

        embed = discord.Embed(
            title=f"",
            timestamp=datetime.datetime.now(datetime.timezone.utc),
        )

        embed.add_field(name="Prompt", value=f"```{prompt[:1020]+"..." if len(prompt)>= 1024 else prompt}```", inline=False)

        if len(prompt) < 80 or enhance:
            if "enhanced_prompt" in dic:
                embed.add_field(
                    name="Enhanced Prompt",
                    value=f"```{dic['enhanced_prompt'][:1020]+"..." if len(dic['enhanced_prompt'])>= 1024 else dic['enhanced_prompt']}```",
                    inline=False,
                )

        embed.add_field(name="Seed", value=f"```{dic['seed']}```", inline=True)
        embed.add_field(
            name="Time Taken",
            value=f"```{round(time_taken.total_seconds(), 2)} s```",
            inline=True,
        )

        embed.add_field(name="", value="", inline=False)

        embed.add_field(name="Model", value=f"```{model}```", inline=True)
        embed.add_field(name="Dimensions", value=f"```{width}x{height}```", inline=True)

        embed.set_image(url=f"attachment://image.png")

        embed.set_footer(text=f"Generated by {interaction.user}")

        if private:
            await interaction.followup.send(embed=embed, ephemeral=True)
            return
        else:
            response = await interaction.followup.send(
                embed=embed, view=view, file=image_file
            )

        message_id = response.id
        dic["_id"] = message_id
        dic["channel_id"] = interaction.channel.id
        dic["user_id"] = interaction.user.id
        dic["guild_id"] = interaction.guild.id
        dic["bookmarks"] = []
        dic["author"] = interaction.user.id
        dic["likes"] = []

        user_data = get_user_data(interaction.user.id)
        if user_data is None:
            user_data = {
                "_id": interaction.user.id,
                "bookmarks": [],
                "likes": [],
                "prompts": [],
                "last_prompt": None,
            }
            save_user_data(interaction.user.id, user_data)

        user_data["prompts"].append(message_id)
        user_data["last_prompt"] = message_id

        update_user_data(interaction.user.id, user_data)
        save_prompt_data(message_id, dic)

    @imagine_command.error
    async def imagine_command_error(
        self, interaction: discord.Interaction, error: app_commands.AppCommandError
    ):
        if isinstance(error, app_commands.CommandOnCooldown):
            embed = await generate_error_message(
                interaction,
                error,
                cooldown_configuration=["- ```1 time every 15 seconds```"],
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            embed = discord.Embed(
                title="An error occurred while generating the image",
                description=f"```cmd\n{error}\n```",
                color=discord.Color.red(),
            )
            try:
                await interaction.followup.send(embed=embed, ephemeral=True)
            except:
                try:
                    await interaction.edit_original_response(embed=embed)
                except:
                    await interaction.response.send_message(embed=embed, ephemeral=True)


async def setup(bot):
    await bot.add_cog(Imagine(bot))
    print("Imagine cog loaded")
